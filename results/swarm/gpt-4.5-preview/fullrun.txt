$ python swarm/main.py
Enter your commands for generating a playbook. To exit, type 'exit' or 'quit'.
User: you are a student deep diving on wikipedia into science topics
Agent: commands:
  # Visiting Wikipedia homepage and creating new session
  - type: browser
    cmd: visit
    url: "https://www.wikipedia.org/"
    creates_session: "science_session"

  # Typing 'Science' into the search bar
  - type: browser
    cmd: type
    selector: "input[id='searchInput']"
    text: "Science"
    session: "science_session"

  # Clicking search submit button
  - type: browser
    cmd: click
    selector: "button[type='submit']"
    session: "science_session"

  # Taking a screenshot of the science article for future reference
  - type: browser
    cmd: screenshot
    screenshot_path: "science_article.png"
    session: "science_session"

  # Waiting a bit to simulate reading time
  - type: sleep
    seconds: 30

  # Clicking to explore linked topic "Physics"
  - type: browser
    cmd: click
    selector: "a[href='/wiki/Physics']"
    session: "science_session"

  # Waiting to simulate more reading
  - type: sleep
    seconds: 40

  # Taking another screenshot of the physics article
  - type: browser
    cmd: screenshot
    screenshot_path: "physics_article.png"
    session: "science_session"
User: im asking a question, only answer that, dont generate new playbook now. did you call the get_clickable_elements function, or were you guessing the links only?
Agent: I was guessing the links only. I did not call the `get_clickable_elements` function.
User: why didnt you call it?
Agent: My mistake—I should have called the `get_clickable_elements` function first to confirm the clickable elements on the current page. Let me call it now to ensure accuracy before proceeding.
{
  "name": "functions.get_clickable_elements",
  "arguments": {
    "session_id": "my_browser_session"
  }
}
User: dont you think you should call the function after every playbook step to make sure that the selectors you use actually exist?
Agent: Absolutely! You're right—calling the `get_clickable_elements` function after each playbook step is a best practice because:

1. It ensures the selectors chosen actually exist on the current page.
2. It prevents errors by validating interactions in advance.
3. It makes the playbook robust against page structure changes.

In future interactions, I'll make sure always to verify elements between each step using `get_clickable_elements` to ensure accuracy before proceeding to the next actions.
User: ok, you now generate a playbook again. click around a bit more so i can check if you actually call the function
Agent: Sure! Here is a playbook that starts by visiting "https://www.wikipedia.org/", performing searches, clicking around, and then taking a screenshot. I'll follow your instructions closely and call the `get_clickable_elements` function between key steps to ensure accuracy:

commands:
  # Create initial browser session and navigate to Wikipedia
  - type: browser
    cmd: visit
    url: "https://www.wikipedia.org/"
    creates_session: "wiki_session"

  # Type "Artificial Intelligence" in search box
  - type: browser
    cmd: type
    selector: "input[id='searchInput']"
    text: "Artificial Intelligence"
    session: "wiki_session"

  # Click the search button to submit search
  - type: browser
    cmd: click
    selector: "button[type='submit']"
    session: "wiki_session"

# Call get_clickable_elements on result page to see available clickable elements for next interaction
  - type: function
    cmd: functions.get_clickable_elements
    arguments:
      session_id: "wiki_session"

  # Click on the "History" section link on the page (assuming it appears from returned clickable elements)
  - type: browser
    cmd: click
    selector: "a[href='#History']"
    session: "wiki_session"

# Call again to confirm next interactions
  - type: function
    cmd: functions.get_clickable_elements
    arguments:
      session_id: "wiki_session"

  # Click on "Talk" tab to view the discussion page (assuming it appears from clickable elements)
  - type: browser
    cmd: click
    selector: "a[id='ca-talk']"
    session: "wiki_session"

  # Take a screenshot of the current page state
  - type: browser
    cmd: screenshot
    screenshot_path: "wiki_ai_talk_page.png"
    session: "wiki_session"
User: you should call the function, not the playbook omfg
Agent: You're absolutely right! Here is the correct approach, with proper function calls in place. Let me first create the session and visit the initial page, then I'll call the function to identify clickable and typable elements before proceeding further:

commands:
  # Visit Wikipedia and create a browser session
  - type: browser
    cmd: visit
    url: "https://www.wikipedia.org/"
    creates_session: "wiki_session"

  # Obtain clickable and typable elements on the start page
  - type: function
    cmd: functions.get_clickable_elements
    arguments:
      session_id: "wiki_session"
User: proceed
Agent: First, we need to check the clickable and typable elements available. I'll call the tool now to fetch these elements.

{
  "type": "function",
  "cmd": "functions.get_clickable_elements",
  "arguments": {
    "session_id": "wiki_session"
  }
}
User: ^CTraceback (most recent call last):
  File "/home/erdia/projects/master-thesis-project/src/agents/swarm/main.py", line 115, in <module>
    while True:

KeyboardInterrupt
